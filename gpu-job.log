2025-02-26 18:44:49.213457: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1740617089.236713    9102 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1740617089.244002    9102 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-02-26 18:44:49.269806: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
W0000 00:00:1740617092.084242    9102 gpu_device.cc:2344] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
/home/burgetlt/miniconda3/envs/py39/lib/python3.9/site-packages/keras/src/layers/core/masking.py:47: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
No GPU found. Running on CPU.
Found 2141 samples across labels: ['bye', 'hello', 'please', 'thankyou']
Train samples: 1498, Validation samples: 321, Test samples: 322
Model: "sequential"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ masking (Masking)               │ (None, 50, 126)        │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ lstm (LSTM)                     │ (None, 50, 64)         │        48,896 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ lstm_1 (LSTM)                   │ (None, 50, 128)        │        98,816 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ lstm_2 (LSTM)                   │ (None, 64)             │        49,408 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (Dense)                   │ (None, 64)             │         4,160 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (Dense)                 │ (None, 32)             │         2,080 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (Dense)                 │ (None, 4)              │           132 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 203,492 (794.89 KB)
 Trainable params: 203,492 (794.89 KB)
 Non-trainable params: 0 (0.00 B)
Epoch 1/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m27s[0m 6s/step - accuracy: 0.2695 - loss: 1.3830[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.2725 - loss: 1.3816[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.2654 - loss: 1.3811[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.2625 - loss: 1.3800[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.2627 - loss: 1.3782[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.2637 - loss: 1.3764
Epoch 1: val_loss improved from inf to 1.32281, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m7s[0m 371ms/step - accuracy: 0.2645 - loss: 1.3752 - val_accuracy: 0.3146 - val_loss: 1.3228 - learning_rate: 0.0010
Epoch 2/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 747ms/step - accuracy: 0.2539 - loss: 1.3239[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 212ms/step - accuracy: 0.2617 - loss: 1.3149[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 205ms/step - accuracy: 0.2656 - loss: 1.3074[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 205ms/step - accuracy: 0.2786 - loss: 1.2993[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 204ms/step - accuracy: 0.2936 - loss: 1.2941[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 198ms/step - accuracy: 0.3049 - loss: 1.2915
Epoch 2: val_loss improved from 1.32281 to 1.24118, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 252ms/step - accuracy: 0.3129 - loss: 1.2897 - val_accuracy: 0.5701 - val_loss: 1.2412 - learning_rate: 0.0010
Epoch 3/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 723ms/step - accuracy: 0.4883 - loss: 1.2521[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 211ms/step - accuracy: 0.4834 - loss: 1.2364[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 207ms/step - accuracy: 0.4768 - loss: 1.2273[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 207ms/step - accuracy: 0.4784 - loss: 1.2172[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 205ms/step - accuracy: 0.4821 - loss: 1.2080[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 200ms/step - accuracy: 0.4857 - loss: 1.2008
Epoch 3: val_loss improved from 1.24118 to 1.08639, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 255ms/step - accuracy: 0.4882 - loss: 1.1957 - val_accuracy: 0.5919 - val_loss: 1.0864 - learning_rate: 0.0010
Epoch 4/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 717ms/step - accuracy: 0.5742 - loss: 1.0863[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.5752 - loss: 1.1176[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.5692 - loss: 1.1304[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.5666 - loss: 1.1352[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.5650 - loss: 1.1350[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.5642 - loss: 1.1344
Epoch 4: val_loss improved from 1.08639 to 1.06010, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 250ms/step - accuracy: 0.5636 - loss: 1.1340 - val_accuracy: 0.5639 - val_loss: 1.0601 - learning_rate: 0.0010
Epoch 5/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 701ms/step - accuracy: 0.6094 - loss: 1.0317[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 198ms/step - accuracy: 0.6055 - loss: 1.0497[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 206ms/step - accuracy: 0.6172 - loss: 1.0507[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 203ms/step - accuracy: 0.6250 - loss: 1.0522[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.6295 - loss: 1.0518[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.6332 - loss: 1.0511
Epoch 5: val_loss improved from 1.06010 to 0.99761, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 255ms/step - accuracy: 0.6358 - loss: 1.0506 - val_accuracy: 0.6760 - val_loss: 0.9976 - learning_rate: 0.0010
Epoch 6/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 719ms/step - accuracy: 0.6758 - loss: 1.0114[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 197ms/step - accuracy: 0.6689 - loss: 1.0078[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 198ms/step - accuracy: 0.6673 - loss: 1.0015[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.6699 - loss: 0.9916[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.6720 - loss: 0.9827[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.6737 - loss: 0.9741
Epoch 6: val_loss improved from 0.99761 to 0.87719, saving model to best_model.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 254ms/step - accuracy: 0.6749 - loss: 0.9680 - val_accuracy: 0.7196 - val_loss: 0.8772 - learning_rate: 0.0010
Epoch 7/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 724ms/step - accuracy: 0.7148 - loss: 0.8937[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 203ms/step - accuracy: 0.7188 - loss: 0.8827[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.7140 - loss: 0.8812[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.7105 - loss: 0.8755[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.7050 - loss: 0.8880[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.7025 - loss: 0.9012
Epoch 7: val_loss did not improve from 0.87719
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 240ms/step - accuracy: 0.7008 - loss: 0.9107 - val_accuracy: 0.6386 - val_loss: 0.9623 - learning_rate: 0.0010
Epoch 8/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 691ms/step - accuracy: 0.6133 - loss: 0.9875[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.6328 - loss: 0.9609[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.6458 - loss: 0.9639[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.6543 - loss: 0.9704[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.6523 - loss: 0.9815[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.6456 - loss: 1.0364
Epoch 8: val_loss did not improve from 0.87719
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 241ms/step - accuracy: 0.6409 - loss: 1.0757 - val_accuracy: 0.2897 - val_loss: 6.1643 - learning_rate: 0.0010
Epoch 9/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 681ms/step - accuracy: 0.3203 - loss: 6.2977[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 197ms/step - accuracy: 0.3184 - loss: 10.2116[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 203ms/step - accuracy: 0.3242 - loss: 10.7480[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 203ms/step - accuracy: 0.3320 - loss: 10.5700[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.3384 - loss: 10.3438[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 196ms/step - accuracy: 0.3434 - loss: 10.2283
Epoch 9: val_loss did not improve from 0.87719

Epoch 9: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 240ms/step - accuracy: 0.3470 - loss: 10.1457 - val_accuracy: 0.3988 - val_loss: 14.2128 - learning_rate: 0.0010
Epoch 10/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 683ms/step - accuracy: 0.3867 - loss: 18.2378[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.3818 - loss: 18.0019[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 201ms/step - accuracy: 0.3817 - loss: 18.5145[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 204ms/step - accuracy: 0.3781 - loss: 19.0374[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 204ms/step - accuracy: 0.3754 - loss: 19.2943[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 197ms/step - accuracy: 0.3736 - loss: 19.4746
Epoch 10: val_loss did not improve from 0.87719
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 242ms/step - accuracy: 0.3723 - loss: 19.6034 - val_accuracy: 0.3583 - val_loss: 17.8248 - learning_rate: 5.0000e-04
Epoch 11/40
[1m1/6[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m3s[0m 684ms/step - accuracy: 0.3438 - loss: 16.9870[1m2/6[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 198ms/step - accuracy: 0.3477 - loss: 21.2053[1m3/6[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 200ms/step - accuracy: 0.3555 - loss: 23.1128[1m4/6[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 202ms/step - accuracy: 0.3650 - loss: 23.6911[1m5/6[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 204ms/step - accuracy: 0.3718 - loss: 24.3493[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 198ms/step - accuracy: 0.3784 - loss: 24.6859
Epoch 11: val_loss did not improve from 0.87719
[1m6/6[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 244ms/step - accuracy: 0.3831 - loss: 24.9263 - val_accuracy: 0.4798 - val_loss: 35.5298 - learning_rate: 5.0000e-04
[1m1/2[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m0s[0m 186ms/step - accuracy: 0.7031 - loss: 0.9337[1m2/2[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 35ms/step - accuracy: 0.6981 - loss: 0.9264 
Test loss: 0.9227, Test accuracy: 0.6957
